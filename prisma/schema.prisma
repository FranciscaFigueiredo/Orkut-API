generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model communities {
  id       Int     @id @default(autoincrement())
  title    String  @unique
  subtitle String?
  privacy  String
  users    users[] @relation("CommunityToUser")
}

model friendship_requests {
  id                                         Int     @id(map: "friendship_requests_pk") @default(autoincrement())
  recipient                                  Int
  sender                                     Int
  status                                     Boolean @default(false)
  users_friendship_requests_recipientTousers users   @relation("friendship_requests_recipientTousers", fields: [recipient], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "friendship_requests_fk0")
  users_friendship_requests_senderTousers    users   @relation("friendship_requests_senderTousers", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "friendship_requests_fk1")
}

model friendships {
  id                                 Int   @id(map: "friendships_pk") @default(autoincrement())
  user_id                            Int
  friend_id                          Int
  users_friendships_friend_idTousers users @relation("friendships_friend_idTousers", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "friendships_fk1")
  users_friendships_user_idTousers   users @relation("friendships_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "friendships_fk0")
}

model testimonials {
  id                                  Int    @id(map: "testimonials_pk") @default(autoincrement())
  recipient                           Int
  sender                              Int
  message                             String
  users_testimonials_recipientTousers users  @relation("testimonials_recipientTousers", fields: [recipient], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "testimonials_fk0")
  users_testimonials_senderTousers    users  @relation("testimonials_senderTousers", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "testimonials_fk1")
}

model users {
  id                                                       Int                   @id @default(autoincrement())
  username                                                 String
  email                                                    String                @unique
  password                                                 String
  avatar                                                   String
  subtitle                                                 String?
  friendship_requests_friendship_requests_recipientTousers friendship_requests[] @relation("friendship_requests_recipientTousers")
  friendship_requests_friendship_requests_senderTousers    friendship_requests[] @relation("friendship_requests_senderTousers")
  friendships_friendships_friend_idTousers                 friendships[]         @relation("friendships_friend_idTousers")
  friendships_friendships_user_idTousers                   friendships[]         @relation("friendships_user_idTousers")
  testimonials_testimonials_recipientTousers               testimonials[]        @relation("testimonials_recipientTousers")
  testimonials_testimonials_senderTousers                  testimonials[]        @relation("testimonials_senderTousers")
  communities                                              communities[]         @relation("CommunityToUser")
}
